############################
#  Book (Meta) Info

title:   Best of Practicing Ruby (Book Edition)
author:
  name:  Gregory Brown, Luke Francl, Magnus Holm, Aaron Patterson, Solomon White et al


#############################
#   Extras

github:
  url: https://github.com/yukimotopress/practicing

original:
  url: https://github.com/elm-city-craftworks/practicing-ruby-manuscripts


######################
#  Table of Contents

contents:
- title:  1. A minimal HTTP server - Build just enough HTTP functionality from scratch to serve up static files
  path:   http-server.md
  sections:
  - title: A (very) brief introduction to HTTP
  - title: Writing the "Hello World" HTTP server
  - title: Serving files over HTTP
  - title: Safely converting a URI into a file path
  - title: Serving up index.html implicitly
  - title: Where to go from here

- title:  2. Event loops demystified - Build a Node.js/EventMachine-style event loop in roughly 150 lines
  path:   evented-io.md
  sections:
  - title: Obligatory chat server example
  - title: Event handling
  - title: The IO loop
  - title: IO events
  - title: Working with the Ruby IO object
  - title: Getting real with IO.select
  - title: Handling streaming input and output
  - title: Conclusions

- title: 3. Parsing JSON the hard way - Learn about low-level parser and compiler tools by implementing a JSON parser
  path:  parsing-json.md
  sections:
  - title: The Tools We'll Be Using
  - title: Racc Basics
  - title: Building our JSON Parser
  - title: Building the tokenizer
  - title: Building the parser
  - title: Building the handler
  - title: Reflections
  - title: Post Script

- title: 4. Tricks for working with text and files - Tear apart a minimal clone of the Jekyll blog engine in search of helpful idioms
  path:  cheap-counterfeits-jekyll.md
  sections:
  - title: A brief overview of Jackal's functionality
  - title: Idioms for text processing
  - title: Idioms for working with files and folders
  - title: Reflections

- title: 5. Working with binary file formats - Read and write bitmap files using only a few dozen lines of code
  path:  working-with-binary-file-formats.md
  sections:
  - title: The anatomy of a bitmap
  - title: Encoding a bitmap image
  - title: Decoding a bitmap image
  - title: Reflections

- title: 6. Building Unix-style command line applications - Build a basic clone of the 'cat' utility while learning some idioms for command line applications
  path:  unix-style-command-line-applications.md
  sections:
  - title: Building an executable script
  - title: Stream processing techniques
  - title: Options parsing
  - title: Basic text formatting
  - title: Error handling and exit codes
  - title: Reflections

- title: 7. Rapid Prototyping - Build a tiny prototype of a tetris game on the command line
  path:  rapid-prototyping.md
  sections:
  - title: The Planning Phase
  - title: The Requirements Phase
  - title: The Coding Phase
    sections:
    - title: "Case 1: line_shape_demo.rb"
    - title: "Case 2: bended_shape_demo.rb"
  - title: Reflections

- title: 8. Building Enumerable 'n' Enumerator - Learn about powerful iteration tools by implementing some of its functionality yourself
  path:  roll-your-own-enumerable-and-enumerator.md
  sections:
  - title: Setting the stage with some tests
  - title: Implementing the `FakeEnumerable` module
  - title: Implementing the `FakeEnumerator` class
  - title:  Reflections

- title: 9. Domain specific API construction - Master classic DSL design patterns by ripping off well-known libraries and tools
  path:  domain-specific-api-construction.md
  sections:
  - title: Implementing `attr_accessor`
  - title: Implementing a Rails-style `before_filter` construct
  - title: Implementing a cheap counterfeit of Mail's API
  - title: Implementing a shoddy version of XML Builder
  - title: Implementing Contest on top of MiniTest
  - title: Implement your own Gherkin parser, or criticize mine!
  - title: Reflections

- title: 10. Safely evaluating user-defined formulas and calculations - Learn how to use Dentaku to evaluate Excel-like formulas in programs
  path:  formula-processing.md
  sections:
  - title: First steps with the Dentaku formula evaluator
  - title: Building the web interface
  - title: Defining garden layouts as simple data tables
  - title: Implementing the formula processor
  - title: Considering the tradeoffs involved in using Dentaku
  - title: Reflections and further explorations
